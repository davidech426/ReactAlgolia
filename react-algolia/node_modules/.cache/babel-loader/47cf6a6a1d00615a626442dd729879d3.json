{"ast":null,"code":"//use a pure reducer function\nconst initialState = {\n  searches: [],\n  results: []\n}; //(previous state, action), avoid mutating state\n//keep track or prev state, dispatch action, and next sate\n\nconst reducer = (state = initialState, action) => {\n  //specify how app's state change in response to the 'searching' action sent to store\n  if (action.type === 'SEARCHING') {\n    return { ...state,\n      searches: [...state.searches, action.data]\n    }; //specify how app's state changes in response to 'obtaining data' action sent to store\n  } else if (action.type === 'OBTAIN_DATA') {\n    return { ...state,\n      results: action.resultingData\n    };\n  } else if (action.type === 'ERROR') {\n    //if erro return the previous state\n    return state;\n  } //if any other action/ unknown action , return previous state\n\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/David/rtslabs/react-algolia/src/reduce/Reduce.js"],"names":["initialState","searches","results","reducer","state","action","type","data","resultingData"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAC;AACfC,EAAAA,QAAQ,EAAC,EADM;AAEfC,EAAAA,OAAO,EAAC;AAFO,CAAnB,C,CAIA;AACA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACJ,YAAP,EAAoBK,MAApB,KAA6B;AACzC;AACA,MAAGA,MAAM,CAACC,IAAP,KAAc,WAAjB,EAA6B;AACzB,WAAM,EACF,GAAGF,KADD;AAEFH,MAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAmBI,MAAM,CAACE,IAA1B;AAFR,KAAN,CADyB,CAK7B;AACC,GAND,MAMM,IAAGF,MAAM,CAACC,IAAP,KAAc,aAAjB,EAA+B;AACjC,WAAM,EACF,GAAGF,KADD;AAEFF,MAAAA,OAAO,EAACG,MAAM,CAACG;AAFb,KAAN;AAIH,GALK,MAKC,IAAGH,MAAM,CAACC,IAAP,KAAc,OAAjB,EAAyB;AAC5B;AACA,WAAOF,KAAP;AACH,GAhBwC,CAiBzC;;;AACA,SAAOA,KAAP;AACH,CAnBD;;AAqBA,eAAeD,OAAf","sourcesContent":["//use a pure reducer function\r\nconst initialState={\r\n    searches:[],\r\n    results:[]\r\n}\r\n//(previous state, action), avoid mutating state\r\n//keep track or prev state, dispatch action, and next sate\r\nconst reducer = (state=initialState,action)=>{\r\n    //specify how app's state change in response to the 'searching' action sent to store\r\n    if(action.type==='SEARCHING'){\r\n        return{\r\n            ...state,\r\n            searches: [...state.searches,action.data]\r\n        }\r\n    //specify how app's state changes in response to 'obtaining data' action sent to store\r\n    }else if(action.type==='OBTAIN_DATA'){\r\n        return{\r\n            ...state,\r\n            results:action.resultingData\r\n        }\r\n    } else if(action.type==='ERROR'){\r\n        //if erro return the previous state\r\n        return state;\r\n    }\r\n    //if any other action/ unknown action , return previous state\r\n    return state;\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}